from typing import List

def minCost(n: int, roads: List[List[int]], appleCost: List[int], k: int) -> int:
    graph = {i: {} for i in range(1, n + 1)}
    for a, b, cost in roads:
        graph[a][b] = cost
        graph[b][a] = cost

    def dfs(node, apples):
        if node == 1:
            return apples * k
        min_cost = float('inf')
        for neighbor, cost in graph[node].items():
            min_cost = min(min_cost, dfs(neighbor, apples + appleCost[neighbor - 1]) + cost)
        return min_cost

    return dfs(1, appleCost[0])

# Example Usage
n = 3
roads = [[1, 2, 1], [2, 3, 3]]
appleCost = [2, 5, 3]
k = 2
print(minCost(n, roads, appleCost, k))  # Output: 10
