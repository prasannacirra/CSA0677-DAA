class Solution:
    def max_xor_subtrees(self, n: int, edges: List[List[int]], values: List[int]) -> int:
        tree = defaultdict(list)
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)
        
        subtree_values = [0] * n
        def dfs(node, parent):
            subtree_values[node] = values[node]
            for child in tree[node]:
                if child != parent:
                    subtree_values[node] ^= dfs(child, node)
            return subtree_values[node]
        
        dfs(0, -1)
        
        max_score = 0
        for i in range(n):
            for j in range(i + 1, n):
                for k in range(n):
                    if (subtree_values[i] ^ subtree_values[j] ^ subtree_values[k]) > max_score:
                        max_score = subtree_values[i] ^ subtree_values[j] ^ subtree_values[k]
        
        return max_score
